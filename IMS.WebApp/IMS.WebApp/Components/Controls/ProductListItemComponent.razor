@inject IDeleteProductUseCase DeleteProductUseCase
@inject NavigationManager NavigationManager

@if(this.Product is not null)
{
	<tr>
		<td>@Product.ProductName</td>
		<td>@Product.Quantity</td>
		<td>@Product.Price.ToString("c")</td>
		<td>
			<a class="btn btn-light"
			   href="/editProduct/@Product.ProductId">
				Edit
			</a>
		</td>
		<td>
			<EditForm Enhance="true" Model="Product"
					  FormName="@($"form-delete-Product-{Product.ProductId}")"
					  OnValidSubmit="() => DeleteProduct(Product.ProductId)">
				<button type="submit" class="btn btn-light">Delete</button>
			</EditForm>
		</td>
	</tr>
}


@code {
	[Parameter]
	public Product? Product { get; set; }

	private async Task DeleteProduct(int ProductId)
	{
		await DeleteProductUseCase.ExecuteAsync(ProductId);
		NavigationManager.Refresh();
	}
}
