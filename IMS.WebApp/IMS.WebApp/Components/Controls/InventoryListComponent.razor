@page "/"

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<PageTitle>Inventories Page</PageTitle>

<h1>List of Inventories</h1>

<br />
<br />

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th>Quantity</th>
			<th>Price</th>
			<th>Name</th>
		</tr>
	</thead>
	<tbody>
		@if (inventories is not null && inventories.Count > 0)
		{
			foreach (var inv in inventories)
			{
				<tr>
					<td>@inv.InventoryName</td>
					<td>@inv.Quantity</td>
					<td>@inv.Price.ToString("c")</td>
					<td>
						<button type="button"
								class="btn btn-light"
								@onclick="() => ShowEditModal(inv)">
							Edit
						</button>
					</td>

				</tr>
			}
		}
	</tbody>
</table>

@if (showEditModal)
{
	<EditInventory SelectedInventory="@selectedInventory"
				   OnClose="CloseEditModal" />
}

@code {
	private List<Inventory>? inventories;
	private bool showEditModal = false;
	private Inventory selectedInventory = new();

	protected override async Task OnInitializedAsync()
	{
		inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync()).ToList();
	}

	private void ShowEditModal(Inventory inventory)
	{
		selectedInventory = new Inventory
			{
				InventoryId = inventory.InventoryId,
				InventoryName = inventory.InventoryName,
				Quantity = inventory.Quantity,
				Price = inventory.Price
			};
		showEditModal = true;
	}

	private void CloseEditModal()
	{
		showEditModal = false;
		// Refresh the list after editing
		//OnInitializedAsync();
	}
}
