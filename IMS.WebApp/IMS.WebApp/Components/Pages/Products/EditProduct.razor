@page "/editProduct/{ProductId:int}"

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase

<h3>Edit Product</h3>
<br />
@if (this.product is not null)
{
    <EditForm Model="product" FormName="formProduct" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <InputNumber @bind-Value="product.ProductId" hidden></InputNumber>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name"
                       @bind-Value="product.ProductName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => product.ProductName"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity"
                         @bind-Value="product.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Quantity"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price"
                         @bind-Value="product.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Price"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>
        &nbsp;
        <a href="/products" class="btn btn-primary">Cancel</a>
    </EditForm>
}
@code {
    [Parameter]
    public int ProductId { get; set; }

    [SupplyParameterFromForm]
    private Product? product { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (this.product is null)
        {
            var prod = await ViewProductByIdUseCase.ExecuteAsync(this.ProductId);
            product = new Product
                {
                    ProductId = prod.ProductId,
                    ProductName = prod.ProductName,
                    Price = prod.Price,
                    Quantity = prod.Quantity
                };
        }

    }

    private async Task Update()
    {
        if (product is not null)
        {
            var prod = new Product
                {
                    ProductId = product.ProductId,
                    ProductName = product.ProductName,
                    Price = product.Price,
                    Quantity = product.Quantity
                };

            await EditProductUseCase.ExecuteAsync(prod);
            NavigationManager.NavigateTo("/products");
        }
    }
}
